[
    {
        "id": "f3c6e6f6b9a4d123",
        "type": "tab",
        "label": "Clock Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fa71b6d8bf8a3b62",
        "type": "ui_group",
        "z": "f3c6e6f6b9a4d123",
        "name": "Clock",
        "tab": "f20f7f2dabc03c49",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a95f6bd95712e3cf",
        "type": "ui_group",
        "z": "f3c6e6f6b9a4d123",
        "name": "System",
        "tab": "f20f7f2dabc03c49",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f20f7f2dabc03c49",
        "type": "ui_tab",
        "name": "Main",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c6afcb9a79a54d5d",
        "type": "ui_ui_control",
        "z": "f3c6e6f6b9a4d123",
        "name": "Dashboard Events",
        "events": "all",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "a725d0f4e0cda361",
                "b8f34474dd1d4619"
            ]
        ]
    },
    {
        "id": "a725d0f4e0cda361",
        "type": "ui_template",
        "z": "f3c6e6f6b9a4d123",
        "group": "fa71b6d8bf8a3b62",
        "name": "Analog Clock",
        "order": 1,
        "width": 6,
        "height": 6,
        "format": "<div class=\"analog-clock-wrapper\">\n    <svg id=\"analog-clock-{{$id}}\" viewBox=\"0 0 200 200\" class=\"analog-clock\">\n        <circle class=\"clock-face\" cx=\"100\" cy=\"100\" r=\"95\"></circle>\n        <g class=\"minute-marks\"></g>\n        <g class=\"hour-marks\"></g>\n        <g class=\"hour-numbers\"></g>\n        <line class=\"hour-hand\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"70\"></line>\n        <line class=\"minute-hand\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"40\"></line>\n        <line class=\"second-hand\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"30\"></line>\n        <circle class=\"center-cap\" cx=\"100\" cy=\"100\" r=\"4\"></circle>\n        <g class=\"subdial minute-subdial\">\n            <circle class=\"subdial-face\" cx=\"60\" cy=\"140\" r=\"28\"></circle>\n            <g class=\"subdial-marks minute-sub-marks\"></g>\n            <line class=\"minute-sub-hand\" x1=\"60\" y1=\"140\" x2=\"60\" y2=\"118\"></line>\n            <circle class=\"subdial-cap\" cx=\"60\" cy=\"140\" r=\"3\"></circle>\n            <text class=\"subdial-label\" x=\"60\" y=\"172\">Минуты</text>\n        </g>\n        <g class=\"subdial second-subdial\">\n            <circle class=\"subdial-face\" cx=\"140\" cy=\"140\" r=\"28\"></circle>\n            <g class=\"subdial-marks second-sub-marks\"></g>\n            <line class=\"second-sub-hand\" x1=\"140\" y1=\"140\" x2=\"140\" y2=\"118\"></line>\n            <circle class=\"subdial-cap\" cx=\"140\" cy=\"140\" r=\"3\"></circle>\n            <text class=\"subdial-label\" x=\"140\" y=\"172\">Секунды</text>\n        </g>\n    </svg>\n</div>\n<script>\n(function(scope){\n    var clockId = \"analog-clock-\" + scope.$id;\n\n    function renderStatic(base){\n        if(!base || base.dataset.rendered){\n            return;\n        }\n        var svgNS = \"http://www.w3.org/2000/svg\";\n        var hourMarks = base.querySelector('.hour-marks');\n        var minuteMarks = base.querySelector('.minute-marks');\n        var hourNumbers = base.querySelector('.hour-numbers');\n        var minuteSubMarks = base.querySelector('.minute-sub-marks');\n        var secondSubMarks = base.querySelector('.second-sub-marks');\n\n        if(hourMarks){\n            for(var i=0;i<12;i++){\n                var angle = (i/12) * Math.PI * 2;\n                var x1 = 100 + Math.sin(angle) * 78;\n                var y1 = 100 - Math.cos(angle) * 78;\n                var x2 = 100 + Math.sin(angle) * 90;\n                var y2 = 100 - Math.cos(angle) * 90;\n                var line = document.createElementNS(svgNS, \"line\");\n                line.setAttribute(\"x1\", x1.toFixed(3));\n                line.setAttribute(\"y1\", y1.toFixed(3));\n                line.setAttribute(\"x2\", x2.toFixed(3));\n                line.setAttribute(\"y2\", y2.toFixed(3));\n                hourMarks.appendChild(line);\n            }\n        }\n\n        if(minuteMarks){\n            for(var j=0;j<60;j++){\n                var angleM = (j/60) * Math.PI * 2;\n                var inner = j % 5 === 0 ? 88 : 92;\n                var x1m = 100 + Math.sin(angleM) * inner;\n                var y1m = 100 - Math.cos(angleM) * inner;\n                var x2m = 100 + Math.sin(angleM) * 94;\n                var y2m = 100 - Math.cos(angleM) * 94;\n                var lineM = document.createElementNS(svgNS, \"line\");\n                lineM.setAttribute(\"x1\", x1m.toFixed(3));\n                lineM.setAttribute(\"y1\", y1m.toFixed(3));\n                lineM.setAttribute(\"x2\", x2m.toFixed(3));\n                lineM.setAttribute(\"y2\", y2m.toFixed(3));\n                minuteMarks.appendChild(lineM);\n            }\n        }\n\n        if(hourNumbers){\n            for(var n=1;n<=12;n++){\n                var angleN = (n/12) * Math.PI * 2;\n                var xN = 100 + Math.sin(angleN) * 70;\n                var yN = 100 - Math.cos(angleN) * 70;\n                var text = document.createElementNS(svgNS, \"text\");\n                text.setAttribute(\"x\", xN.toFixed(3));\n                text.setAttribute(\"y\", yN.toFixed(3));\n                text.setAttribute(\"text-anchor\", \"middle\");\n                text.setAttribute(\"alignment-baseline\", \"middle\");\n                text.textContent = n;\n                hourNumbers.appendChild(text);\n            }\n        }\n\n        function createSubMarks(group, cx){\n            if(!group){\n                return;\n            }\n            for(var k=0;k<12;k++){\n                var angleS = (k/12) * Math.PI * 2;\n                var x1s = cx + Math.sin(angleS) * 18;\n                var y1s = 140 - Math.cos(angleS) * 18;\n                var x2s = cx + Math.sin(angleS) * 25;\n                var y2s = 140 - Math.cos(angleS) * 25;\n                var lineS = document.createElementNS(svgNS, \"line\");\n                lineS.setAttribute(\"x1\", x1s.toFixed(3));\n                lineS.setAttribute(\"y1\", y1s.toFixed(3));\n                lineS.setAttribute(\"x2\", x2s.toFixed(3));\n                lineS.setAttribute(\"y2\", y2s.toFixed(3));\n                group.appendChild(lineS);\n            }\n        }\n\n        createSubMarks(minuteSubMarks, 60);\n        createSubMarks(secondSubMarks, 140);\n\n        base.dataset.rendered = \"true\";\n    }\n\n    function applyTime(msg){\n        if(!msg || !msg.time){\n            return;\n        }\n        var time = msg.time;\n        var base = document.getElementById(clockId);\n        if(!base){\n            return;\n        }\n        renderStatic(base);\n        var hours = Number(time.hours) || 0;\n        var minutes = Number(time.minutes) || 0;\n        var seconds = Number(time.seconds) || 0;\n\n        var hourAngle = ((hours % 12) + minutes / 60) * 30;\n        var minuteAngle = (minutes + seconds / 60) * 6;\n        var secondAngle = seconds * 6;\n\n        var hourHand = base.querySelector('.hour-hand');\n        var minuteHand = base.querySelector('.minute-hand');\n        var secondHand = base.querySelector('.second-hand');\n        var minuteSubHand = base.querySelector('.minute-sub-hand');\n        var secondSubHand = base.querySelector('.second-sub-hand');\n\n        if(hourHand){\n            hourHand.setAttribute(\"transform\", \"rotate(\" + hourAngle + \" 100 100)\");\n        }\n        if(minuteHand){\n            minuteHand.setAttribute(\"transform\", \"rotate(\" + minuteAngle + \" 100 100)\");\n        }\n        if(secondHand){\n            secondHand.setAttribute(\"transform\", \"rotate(\" + secondAngle + \" 100 100)\");\n        }\n        if(minuteSubHand){\n            minuteSubHand.setAttribute(\"transform\", \"rotate(\" + minuteAngle + \" 60 140)\");\n        }\n        if(secondSubHand){\n            secondSubHand.setAttribute(\"transform\", \"rotate(\" + secondAngle + \" 140 140)\");\n        }\n    }\n\n    scope.$watch('msg', function(msg){\n        if(!msg || !msg.time){\n            return;\n        }\n        scope.$evalAsync(function(){\n            applyTime(msg);\n        });\n    });\n})(scope);\n</script>\n<style>\n    .analog-clock-wrapper{\n        display:flex;\n        justify-content:center;\n        align-items:center;\n        width:100%;\n        height:100%;\n        padding:10px;\n        box-sizing:border-box;\n    }\n    .analog-clock{\n        max-width:100%;\n        max-height:100%;\n    }\n    .clock-face{\n        fill:#1b1b1b;\n        stroke:#f5f5f5;\n        stroke-width:4;\n    }\n    .hour-marks line{\n        stroke:#f5f5f5;\n        stroke-width:3.5;\n        stroke-linecap:round;\n    }\n    .minute-marks line{\n        stroke:#888;\n        stroke-width:1.5;\n        stroke-linecap:round;\n    }\n    .hour-numbers text{\n        fill:#ffffff;\n        font-size:14px;\n        font-weight:bold;\n    }\n    .hour-hand{\n        stroke:#ffffff;\n        stroke-width:6;\n        stroke-linecap:round;\n    }\n    .minute-hand{\n        stroke:#ffffff;\n        stroke-width:4;\n        stroke-linecap:round;\n    }\n    .second-hand{\n        stroke:#ff5722;\n        stroke-width:2;\n        stroke-linecap:round;\n    }\n    .center-cap{\n        fill:#ff5722;\n    }\n    .subdial-face{\n        fill:#101010;\n        stroke:#b0bec5;\n        stroke-width:2;\n    }\n    .subdial-marks line{\n        stroke:#b0bec5;\n        stroke-width:1.2;\n        stroke-linecap:round;\n    }\n    .minute-sub-hand{\n        stroke:#4caf50;\n        stroke-width:3;\n        stroke-linecap:round;\n    }\n    .second-sub-hand{\n        stroke:#ff9800;\n        stroke-width:2.5;\n        stroke-linecap:round;\n    }\n    .subdial-cap{\n        fill:#ff5722;\n    }\n    .subdial-label{\n        fill:#cfd8dc;\n        font-size:10px;\n        text-anchor:middle;\n        dominant-baseline:hanging;\n    }\n</style>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 440,
        "y": 120,
        "wires": []
    },
    {
        "id": "f8f0c1aeb54b9a66",
        "type": "function",
        "z": "f3c6e6f6b9a4d123",
        "name": "Формат времени",
        "func": "var now = new Date();\nif (isNaN(now.getTime())) {\n    node.status({ fill: 'red', shape: 'ring', text: 'некорректное время' });\n    node.warn('Формат времени: получено некорректное значение времени');\n    return null;\n}\n\nvar weekday = now.toLocaleDateString('ru-RU', { weekday: 'long' });\nif (weekday) {\n    weekday = weekday.charAt(0).toUpperCase() + weekday.slice(1);\n}\n\nvar timeString = now.toLocaleTimeString('ru-RU', {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false\n});\n\nvar dateString = now.toLocaleDateString('ru-RU', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n});\n\nvar isoString = now.toISOString();\nvar dateISO = isoString.slice(0, 10);\n\nmsg = {\n    payload: timeString,\n    date: dateString,\n    weekday: weekday,\n    datetime: (weekday ? weekday + ', ' : '') + dateString,\n    iso: isoString,\n    dateISO: dateISO,\n    timestamp: now.getTime(),\n    time: {\n        hours: now.getHours(),\n        minutes: now.getMinutes(),\n        seconds: now.getSeconds()\n    }\n};\n\nnode.status({ fill: 'green', shape: 'dot', text: timeString });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 120,
        "wires": [
            [
                "ca54d2c0e8337d15",
                "b5326c2f967d4f8d",
                "a725d0f4e0cda361",
                "d35f6a0e7d8e2b3a"
            ]
        ]
    },
    {
        "id": "ca54d2c0e8337d15",
        "type": "ui_text",
        "z": "f3c6e6f6b9a4d123",
        "group": "fa71b6d8bf8a3b62",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Цифровое время",
        "label": "Время",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 970,
        "y": 120,
        "wires": []
    },
    {
        "id": "cd2213c541fa0b8a",
        "type": "inject",
        "z": "f3c6e6f6b9a4d123",
        "name": "Установить версию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "versionTime",
                "v": "15:45",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2025-10-21_b02",
        "payloadType": "str",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "f5a77bd010b90258"
            ]
        ]
    },
    {
        "id": "f5a77bd010b90258",
        "type": "change",
        "z": "f3c6e6f6b9a4d123",
        "name": "flow.version + history",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "versionTime",
                "pt": "flow",
                "to": "versionTime",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "versionHistory",
                "pt": "flow",
                "to": "[{\"version\": \"2025-10-21_b02\", \"time\": \"15:45\", \"date\": \"21 октября 2025, 15:45\", \"changes\": [\"На главной панели добавлен календарь с выбором даты, синхронизированный с серверным временем.\", \"Выбор даты отправляется в поток, что позволяет при необходимости использовать его в других узлах.\"]}, {\"version\": \"2025-10-21_b01\", \"time\": \"14:31\", \"date\": \"21 октября 2025, 14:31\", \"changes\": [\"Актуализирована версия панели и история на текущие дату и время (часы и минуты).\"]}, {\"version\": \"2024-05-17_b01\", \"date\": \"17 мая 2024\", \"changes\": [\"Серверный таймер синхронизирует аналоговые и цифровые часы без зависимости от браузера.\", \"Цифровые виджеты обновляются из одного источника, устраняя гонки между клиентами.\", \"История версий формируется из данных потока и автоматически обновляется на панели.\", \"Функция форматирования времени показывает статус и журналирует ошибки при сбоях.\"]}, {\"version\": \"2024-05-16_b01\", \"date\": \"16 мая 2024\", \"changes\": [\"Добавлена отдельная вкладка Dashboard для просмотра истории версий.\", \"Описана история изменений предыдущих выпусков проекта.\"]}, {\"version\": \"2024-05-15_b02\", \"date\": \"15 мая 2024\", \"changes\": [\"Расширен аналоговый циферблат: добавлены цифры, минутный и секундный субциферблаты.\", \"В панель выведены цифровое время и дата с днём недели на русском языке.\"]}, {\"version\": \"2024-05-14_b01\", \"date\": \"14 мая 2024\", \"changes\": [\"Начальная версия панели мониторинга с базовым отображением времени.\"]}]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "history",
                "pt": "msg",
                "to": "versionHistory",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "version",
                "pt": "msg",
                "to": "version",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "versionTime",
                "pt": "msg",
                "to": "versionTime",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$flowContext('version') & ($flowContext('versionTime') ? ' ' & $flowContext('versionTime') : '')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 340,
        "wires": [
            [
                "e1ad26486aaeba76",
                "c62b9e574da0438e"
            ]
        ]
    },
    {
        "id": "b8f34474dd1d4619",
        "type": "function",
        "z": "f3c6e6f6b9a4d123",
        "name": "Отправить версию",
        "func": "var version = flow.get('version');\nvar versionTime = flow.get('versionTime');\nvar history = flow.get('versionHistory');\nif (!version) {\n    node.status({ fill: 'yellow', shape: 'ring', text: 'версия не задана' });\n    node.warn('Отправить версию: отсутствует значение flow.version');\n    return null;\n}\nvar displayVersion = version;\nif (versionTime) {\n    displayVersion = displayVersion + ' ' + versionTime;\n}\nmsg.version = version;\nmsg.versionTime = versionTime || '';\nmsg.payload = displayVersion;\nmsg.history = Array.isArray(history) ? history : [];\nnode.status({ fill: 'green', shape: 'dot', text: displayVersion });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "e1ad26486aaeba76",
                "c62b9e574da0438e"
            ]
        ]
    },
    {
        "id": "e1ad26486aaeba76",
        "type": "ui_text",
        "z": "f3c6e6f6b9a4d123",
        "group": "a95f6bd95712e3cf",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "Version",
        "label": "Version",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "b5326c2f967d4f8d",
        "type": "change",
        "z": "f3c6e6f6b9a4d123",
        "name": "Дата в payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "datetime",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 180,
        "wires": [
            [
                "c7f42a9f8dc3421a"
            ]
        ]
    },
    {
        "id": "c7f42a9f8dc3421a",
        "type": "ui_text",
        "z": "f3c6e6f6b9a4d123",
        "group": "fa71b6d8bf8a3b62",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "Дата",
        "label": "Дата",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 970,
        "y": 180,
        "wires": []
    },
    {
        "id": "d0ecb2f691f64a9c",
        "type": "ui_tab",
        "name": "Версии",
        "icon": "note",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7354eb7911ac4b7b",
        "type": "ui_group",
        "z": "f3c6e6f6b9a4d123",
        "name": "История версий",
        "tab": "d0ecb2f691f64a9c",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "c62b9e574da0438e",
        "type": "ui_template",
        "z": "f3c6e6f6b9a4d123",
        "group": "7354eb7911ac4b7b",
        "name": "История версий",
        "order": 1,
        "width": 12,
        "height": 8,
        "format": "<style>\n.version-history{font-family:\"PT Sans\",sans-serif;padding:4px 12px 16px;}\n.version-history h3{margin:0 0 16px;font-weight:600;}\n.version-entry{margin:0 0 16px;padding:12px 16px;border-left:4px solid #2196f3;background:#f5f5f5;border-radius:4px;box-shadow:inset 0 0 0 1px rgba(0,0,0,0.05);}\n.version-entry:nth-child(3){border-color:#4caf50;}\n.version-entry:nth-child(4){border-color:#9c27b0;}\n.version-title{font-size:16px;font-weight:600;display:flex;align-items:center;gap:8px;}\n.version-date{color:#555;margin:4px 0 10px;}\n.version-entry ul{margin:0;padding-left:20px;}\n.current-version{margin-bottom:16px;font-weight:600;display:flex;align-items:center;gap:8px;}\n.version-time-badge{display:inline-flex;align-items:center;padding:2px 6px;border-radius:4px;background:#eceff1;color:#37474f;font-size:12px;font-weight:600;}\n.version-empty{padding:12px 16px;background:#fafafa;border:1px dashed #b0bec5;border-radius:4px;color:#607d8b;}\n</style>\n<div class=\"version-history\" ng-if=\"msg\">\n  <h3>История версий</h3>\n  <div class=\"current-version\" ng-if=\"msg.version || msg.payload\">\n    <span>Текущая версия: {{msg.version || msg.payload}}</span>\n    <span class=\"version-time-badge\" ng-if=\"msg.versionTime\">{{msg.versionTime}}</span>\n  </div>\n  <div class=\"version-empty\" ng-if=\"!msg.history || !msg.history.length\">История изменений пока отсутствует.</div>\n  <div class=\"version-entry\" ng-repeat=\"entry in msg.history track by entry.version\">\n    <div class=\"version-title\">\n      <span>{{entry.version}}</span>\n      <span class=\"version-time-badge\" ng-if=\"entry.time\">{{entry.time}}</span>\n    </div>\n    <div class=\"version-date\" ng-if=\"entry.date\">{{entry.date}}</div>\n    <ul>\n      <li ng-repeat=\"change in entry.changes track by $index\">{{change}}</li>\n    </ul>\n  </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 740,
        "y": 440,
        "wires": []
    },
    {
        "id": "d7c8d5637d4c8f6e",
        "type": "inject",
        "z": "f3c6e6f6b9a4d123",
        "name": "Серверный таймер",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "f8f0c1aeb54b9a66"
            ]
        ]
    },
    {
        "id": "d35f6a0e7d8e2b3a",
        "type": "ui_template",
        "z": "f3c6e6f6b9a4d123",
        "name": "Календарь",
        "group": "a95f6bd95712e3cf",
        "order": 2,
        "width": 6,
        "height": 4,
        "format": "<md-card class=\"calendar-card\">\n    <div class=\"calendar-content\">\n        <div class=\"calendar-header\">Календарь</div>\n        <input type=\"date\" class=\"calendar-input\" ng-model=\"calendarDate\" ng-change=\"calendarChange()\" />\n    </div>\n</md-card>\n<script>\n(function(scope){\n    scope.calendarDate = scope.calendarDate || null;\n\n    function normalize(value){\n        if (!value && value !== 0) {\n            return null;\n        }\n        if (typeof value === 'number') {\n            var fromNumber = new Date(value);\n            if (!isNaN(fromNumber.getTime())) {\n                return fromNumber.toISOString().slice(0, 10);\n            }\n            return null;\n        }\n        if (typeof value === 'string') {\n            if (value.length >= 10) {\n                return value.slice(0, 10);\n            }\n            return null;\n        }\n        if (value instanceof Date) {\n            if (!isNaN(value.getTime())) {\n                return value.toISOString().slice(0, 10);\n            }\n            return null;\n        }\n        return null;\n    }\n\n    scope.calendarChange = function(){\n        if (scope.calendarDate) {\n            scope.send({ payload: scope.calendarDate });\n        }\n    };\n\n    scope.$watch('msg', function(msg){\n        if (!msg) {\n            return;\n        }\n        var incoming = normalize(msg.dateISO || msg.iso || msg.payload || msg.timestamp);\n        if (incoming && incoming !== scope.calendarDate) {\n            scope.$evalAsync(function(){\n                scope.calendarDate = incoming;\n            });\n        }\n    });\n})(scope);\n</script>\n<style>\n    .calendar-card {\n        width: 100%;\n        box-sizing: border-box;\n        padding: 12px 16px 16px;\n        background-color: #1a1a1a;\n        color: #eceff1;\n    }\n    .calendar-content {\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n    }\n    .calendar-header {\n        font-size: 16px;\n        font-weight: 600;\n        letter-spacing: 0.3px;\n    }\n    .calendar-input {\n        font-size: 16px;\n        padding: 6px 8px;\n        border: 1px solid #607d8b;\n        border-radius: 4px;\n        background-color: #263238;\n        color: #eceff1;\n    }\n    .calendar-input:focus {\n        outline: none;\n        border-color: #42a5f5;\n        box-shadow: 0 0 0 1px rgba(66, 165, 245, 0.4);\n    }\n</style>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 720,
        "y": 320,
        "wires": []
    }
]